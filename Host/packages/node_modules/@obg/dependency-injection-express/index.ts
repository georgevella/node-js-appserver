import { ServiceProvider, IServiceProvider, IModule, getAllModules } from "@obg/dependency-injection";
import { IContainer } from "container-ioc";
import "reflect-metadata";
import { Request, Application, Response, NextFunction } from "express";
import { Dictionary } from 'typescript-collections';
import { IMiddleware, IRoutingMiddleware } from '@obg/webapp-core';

export interface IMiddlewareConfiguration {
  usePreprocessingMiddleware(order: number, containerKey: Symbol): void;
  useRoutingMiddleware(urlPath: string, containerKey: Symbol): void;
  usePostprocessingMiddleware(order: number, containeKey: Symbol): void;
}

export interface IExpressModule extends IModule {
  registerMiddleware(middlewareConfiguration: IMiddlewareConfiguration): void;
}

class OrderedMiddlewareMetadata {
  constructor(readonly order: number, readonly containerKey: Symbol) {
  }
}

class MiddlewareConfiguration implements IMiddlewareConfiguration {
  private preprocessingMiddlewareList: OrderedMiddlewareMetadata[] = [];
  private routingMiddlewareList: Dictionary<string, Symbol[]> = new Dictionary<string, Symbol[]>();
  private postprocessingMiddlewareList: OrderedMiddlewareMetadata[] = [];

  usePreprocessingMiddleware(order: number, containerKey: Symbol): void {
    this.preprocessingMiddlewareList.push({
      order: order,
      containerKey: containerKey
    });
  }

  useRoutingMiddleware(path: string, containerKey: Symbol): void {
    if (!this.routingMiddlewareList.containsKey(path)) {
      this.routingMiddlewareList.setValue(path, [containerKey]);
    } else {
      var routeProviderCollection = this.routingMiddlewareList.getValue(path);
      routeProviderCollection.push(containerKey);
    }
  }

  usePostprocessingMiddleware(order: number, containerKey: Symbol): void {
    this.postprocessingMiddlewareList.push({
      order: order,
      containerKey: containerKey
    });
  }

  public applyConfiguration(app: Application) {
    this.registerOrderedMiddleware(app, this.preprocessingMiddlewareList, "preprocessing");

    this.routingMiddlewareList.keys().forEach(urlPath => {
      // don't add the root route for now
      if (urlPath == "/") return;

      this.registerRoutedMiddleware(app, urlPath, this.routingMiddlewareList.getValue(urlPath));
    });

    var rpcRoot = this.routingMiddlewareList.getValue("/");
    if (rpcRoot != null) {
      this.registerRoutedMiddleware(app, "/", rpcRoot);
    }

    this.registerOrderedMiddleware(app, this.postprocessingMiddlewareList, "postprocessing");
  }

  registerRoutedMiddleware(app: Application, urlPath: string, list: Symbol[]) {
    console.log("Adding routing middlware for path [" + urlPath + "]");
    app.use(urlPath, (req, res, next) => {
      console.log("Resolving routes for: " + urlPath);

      var container: IServiceProvider = getCurrentContainer(req);

      var executeNext: boolean = true;

      list.forEach(key => {
        var routingMiddleware = container.getService<IRoutingMiddleware>(key);
        if (routingMiddleware.shouldHandleRequest(req) && executeNext) {
          executeNext = routingMiddleware.handleRequest(req, res);
        }
      });

      if (executeNext) {
        next();
      }
    });
  }

  registerOrderedMiddleware(app: Application, list: OrderedMiddlewareMetadata[], mode: string): void {
    list
      .sort((a, b) => { return a.order - b.order; })
      .forEach(key => {
        console.log("Registering " + mode + " middleware [" + key.containerKey.toString() + "]");
        app.use((
          req: Request,
          res: Response,
          next: NextFunction
        ) => {
          var container: IServiceProvider = getCurrentContainer(req);
          var middleware: IMiddleware = container.getService<IMiddleware>(key.containerKey);

          if (middleware.handleRequest(req, res)) {
            next();
          }
        });
      });
  }
}

function isExpressModule(m: IModule): m is IExpressModule {
  return 'registerMiddleware' in m;
}

export function registerExpressMiddlewares(app: Application) {
  var configuration = new MiddlewareConfiguration();

  getAllModules().filter(m => isExpressModule(m))
    .forEach(m => {
      var expressModule = m as IExpressModule;
      expressModule.registerMiddleware(configuration);
    });

  configuration.applyConfiguration(app);
}

export function registerServiceProvider(
  req: Request,
  container: IContainer
): void {
  Reflect.defineMetadata("container", new ServiceProvider(container), req);
}

export function getCurrentContainer(req: Request): IServiceProvider {
  let serviceProvider: IServiceProvider = Reflect.getMetadata("container", req);

  return serviceProvider;
}
