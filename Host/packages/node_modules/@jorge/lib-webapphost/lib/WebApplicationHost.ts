import * as express from "express";
import * as bp from "body-parser";
import * as cp from "cookie-parser";
import * as path from "path";
import * as logger from "morgan";
import "reflect-metadata";

import { debug } from "util";
import { Server } from "http";

import { IWebApplicationHost } from "./IWebApplicationHost";
import { IRouteProvider } from "./IRouteProvider";
import { IExpressRouteProvider } from "./IExpressRouteProvider";
import { Injectable, IContainer, Container } from "container-ioc";
import {
  createChildContainer,
  IServiceProvider,
  createChildServiceProvider
} from "@jorge/lib-di";

@Injectable()
export class WebApplicationHost implements IWebApplicationHost {
  viewsDirectory: string;
  staticFilesDirectory: string;
  viewEngine: string;
  baseDirectory: string;

  addRoute(path: string, routeProvider: IRouteProvider): void {
    var expressRouteProvider = routeProvider as IExpressRouteProvider;

    if (expressRouteProvider != null) {
      this.app.use(path, expressRouteProvider.getExpressRouter());
    }
  }

  socket: Server;
  app: express.Application;

  /**
   *
   */
  public constructor() {
    this.app = express();

    this.app
      .use(logger("dev"))
      .use(bp.json())
      .use(bp.urlencoded({ extended: false }))
      .use(cp()); // cookie parser

    this.app.use(function(
      req: express.Request,
      res: express.Response,
      next: any
    ) {
      let childContainer: IContainer = createChildContainer();
      childContainer.register([
        {
          token: Symbol.for("Name"),
          useValue: "helloWorld"
        }
      ]);

      Reflect.defineMetadata(
        "container",
        createChildServiceProvider(childContainer),
        req
      );

      next();      
    });

    this.viewEngine = "pug";
    this.baseDirectory = __dirname;
    this.viewsDirectory = "views";
    this.staticFilesDirectory = "public";
  }
  public start(port: number) {
    this.socket = this.app.listen(port, () => {
      console.info("Express Server Listening on port " + port);
    });
  }
  public initialize(): void {
    this.app.set("views", path.join(this.baseDirectory, this.viewsDirectory));
    this.app.set("view engine", this.viewEngine);

    // include static resources
    this.app.use(
      express.static(path.join(this.baseDirectory, this.staticFilesDirectory))
    );
  }
}
