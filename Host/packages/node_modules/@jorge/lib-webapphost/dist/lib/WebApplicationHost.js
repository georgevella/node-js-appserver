"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var bp = require("body-parser");
var cp = require("cookie-parser");
var path = require("path");
var logger = require("morgan");
require("reflect-metadata");
var container_ioc_1 = require("container-ioc");
var lib_di_1 = require("@jorge/lib-di");
var WebApplicationHost = /** @class */ (function () {
    /**
     *
     */
    function WebApplicationHost() {
        this.app = express();
        this.app
            .use(logger("dev"))
            .use(bp.json())
            .use(bp.urlencoded({ extended: false }))
            .use(cp()); // cookie parser
        this.app.use(function (req, res, next) {
            var childContainer = lib_di_1.createChildContainer();
            childContainer.register([
                {
                    token: Symbol.for("Name"),
                    useValue: "helloWorld"
                }
            ]);
            Reflect.defineMetadata("container", new lib_di_1.ServiceProvider(childContainer), req);
            next();
        });
        this.viewEngine = "pug";
        this.baseDirectory = __dirname;
        this.viewsDirectory = "views";
        this.staticFilesDirectory = "public";
    }
    WebApplicationHost.prototype.addRoute = function (path, routeProvider) {
        var expressRouteProvider = routeProvider;
        if (expressRouteProvider != null) {
            this.app.use(path, expressRouteProvider.getExpressRouter());
        }
    };
    WebApplicationHost.prototype.start = function (port) {
        this.socket = this.app.listen(port, function () {
            console.info("Express Server Listening on port " + port);
        });
    };
    WebApplicationHost.prototype.initialize = function () {
        this.app.set("views", path.join(this.baseDirectory, this.viewsDirectory));
        this.app.set("view engine", this.viewEngine);
        // include static resources
        this.app.use(express.static(path.join(this.baseDirectory, this.staticFilesDirectory)));
    };
    WebApplicationHost = __decorate([
        container_ioc_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], WebApplicationHost);
    return WebApplicationHost;
}());
exports.WebApplicationHost = WebApplicationHost;
//# sourceMappingURL=WebApplicationHost.js.map