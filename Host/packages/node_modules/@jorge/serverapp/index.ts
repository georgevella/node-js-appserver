import { IContainer } from "container-ioc";
import * as express from "express";
import * as bp from "body-parser";
import * as cp from "cookie-parser";
import * as path from "path";
import * as logger from "morgan";
import "reflect-metadata";

import { debug } from "util";
import {
  IWebApplicationHost,
  WebApplicationHost,
  IExpressRouteProvider,
  TApplication
} from "@jorge/lib-webapphost";

import * as di from "@jorge/lib-di";

class Server {
  serviceProvider: di.IServiceProvider;
  host: IWebApplicationHost;

  /**
   *
   */
  public constructor() {
    this.serviceProvider = di.getGlobalServiceProvider();

    this.host = this.serviceProvider.getService(TApplication);

    this.host.baseDirectory = path.join(__dirname, "../");
    this.host.addRoute("/", new DefaultRoutes());
  }

  /**
   * start
   */
  public start(port: number) {
    this.host.initialize();
    this.host.start(port);
  }
}

class DefaultRoutes implements IExpressRouteProvider {
  router: express.Router;

  constructor() {
    this.router = express.Router();

    this.router.get("/", (req, res) => {            
      let container: di.IServiceProvider = Reflect.getMetadata("container", req);
      let value: string = container.getService(Symbol.for("Name"));
      res.render("index", { title: "Express [" + value + "]" });
    });
  }

  public getExpressRouter(): express.Router {
    return this.router;
  }
}

let server = new Server();
server.start(3000);
