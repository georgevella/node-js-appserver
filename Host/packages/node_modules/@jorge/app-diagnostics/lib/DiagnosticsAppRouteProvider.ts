import { IRoutingMiddleware } from "@jorge/lib-webapp-core";
import * as di from "@jorge/lib-di";
import { Injectable } from "container-ioc";
import { Express, Request, Response, NextFunction, Router } from "express";
import * as express from "express"    // required for express()
import * as path from "path";
import { IServiceProvider } from "@jorge/lib-di";
import { getCurrentContainer } from '@jorge/lib-di-express'
import { getDeviceInformation } from '@jorge/lib-devicedetection';
import { getMarketInformation } from "@jorge/lib-marketdetection";

@Injectable()
export class DiagnosticsAppRouteProvider implements IRoutingMiddleware {
  app: Express;
  router: Router;

  shouldHandleRequest(request: Request): boolean {
    return true;
  }

  handleRequest(
    request: Request,
    response: Response
  ): boolean {
    this.app(request, response);

    return false;
  }

  public readonly path: string = "/diagnostics";

  constructor() {
    this.app = express();

    this.router = express.Router();

    this.router.get("/", (req, res, next) => {
      res.json({
        hello: "world",
        device: getDeviceInformation(req),
        market: getMarketInformation(req)
      });
    });

    this.app.use("/", this.router);
  }
}
