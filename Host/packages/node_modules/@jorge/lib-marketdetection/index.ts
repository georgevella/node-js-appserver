export * from "./lib/interfaces";
export * from "./lib/MarketDetectionService";
export * from "./lib/symbols";
export * from "./lib/middleware";

import { registerModule, ContainerConfiguration } from "@jorge/lib-di";
import { TMarketDetectionService, TMarketDetector, TMarketDetectionMiddleware } from "./lib/symbols";
import { MarketDetectionService } from "./lib/MarketDetectionService";
import { RequestIpMarketDetector } from "./lib/detectors";
import { MarketDetectionMiddleware } from "./lib/middleware"
import { IExpressModule, IMiddlewareConfiguration } from "@jorge/lib-di-express";

class MarketDetectionModule implements IExpressModule {
  registerServices(container: ContainerConfiguration): void {
    container.register(TMarketDetectionService, MarketDetectionService);
    container.registerCollection(TMarketDetector, RequestIpMarketDetector)
    container.register(TMarketDetectionMiddleware, MarketDetectionMiddleware);
  }

  registerMiddleware(configuration: IMiddlewareConfiguration): void {
    configuration.usePreprocessingMiddleware(100, TMarketDetectionMiddleware);
  }
}

console.debug("marketdetection: registering modules");
registerModule(new MarketDetectionModule());