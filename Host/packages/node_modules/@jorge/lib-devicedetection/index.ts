export * from "./lib/interfaces";
export * from "./lib/DeviceInformation";
export * from "./lib/SniffrDeviceDetectionService";
export * from "./lib/symbols";
export * from "./lib/middleware"

import * as di from "@jorge/lib-di";
import { IExpressModule, IMiddlewareConfiguration } from "@jorge/lib-di-express";
import { TDeviceDetectionService, TDeviceDetectionMiddleware } from "./lib/symbols";
import { SniffrDeviceDetectionService } from "./lib/SniffrDeviceDetectionService";
import { DeviceDetectionMiddleware } from "./lib/middleware";

export class DeviceDetectionModule implements IExpressModule {
  registerServices(container: di.ContainerConfiguration): void {
    container.registerSingleton(TDeviceDetectionService, SniffrDeviceDetectionService);
    container.register(TDeviceDetectionMiddleware, DeviceDetectionMiddleware);
  }

  registerMiddleware(configuration: IMiddlewareConfiguration): void {
    configuration.usePreprocessingMiddleware(100, TDeviceDetectionMiddleware)
  }
}

console.debug("devicedetection: registering modules");
di.registerModule(new DeviceDetectionModule());