import * as webpack from 'webpack';
import * as HtmlWebpackPlugin from 'html-webpack-plugin';
import {ExtractTextPlugin} from "extract-text-webpack-plugin";
import * as helpers from './helpers';



const config: webpack.Configuration = {
    entry: {
        polyfills: helpers.root("./client/polyfills.ts"),
        main: helpers.root("./client/main.ts"),
        styles: [helpers.root("./client/styles.css")]
    },
    resolve: {
        extensions: [".ts", ".js"]
    },

    plugins: [
        // Workaround for angular/angular#11580
        new webpack.ContextReplacementPlugin(
            // The (\\|\/) piece accounts for path separators in *nix and Windows
            /\@angular(\\|\/)core(\\|\/)esm5/,
            helpers.root("./client"), // location of your src
            {} // a map of your routes
        ),
        new webpack.optimize.CommonsChunkPlugin({
            minChunks: Infinity,
            name: "inline"
        }),

        new HtmlWebpackPlugin({
            template: helpers.root("./client/index.html"),
            xhtml: true,
            minify: false,
            chunksSortMode: (left, right) => {
                let entryPoints = [
                    // required stuff goes here
                    "inline",
                    "polyfills",
                    "sw-register",
                    // global styles
                    "styles",
                    // vendor and main always go last
                    "vendor",
                    "main"
                ];

                let leftIndex = entryPoints.indexOf(left.names[0]);
                let rightindex = entryPoints.indexOf(right.names[0]);

                if (leftIndex > rightindex) {
                    return 1;
                } else if (leftIndex < rightindex) {
                    return -1;
                } else {
                    return 0;
                }
            }
        }),

        new webpack.optimize.CommonsChunkPlugin({
            name: "vendor",
            chunks: ["main"],
            minChunks: (module, count) => {
                return module.resource && /node_modules/.test(module.resource);
            }
        }),

        new webpack.optimize.CommonsChunkPlugin({
            name: "main",
            async: "common",
            children: true,
            minChunks: 2
        })
    ],

    module: {
        rules: [
            {
                test: /\.ts$/,
                use: [
                    {
                        loader: "@ngtools/webpack",
                        options: {
                            tsConfigPath: helpers.root("client", "tsconfig.app.json")
                        }
                    }
                ]
            },
            {
                test: /\.html$/,
                use: "raw-loader",
                exclude: [helpers.root("client/index.html")]
            },
            {
                test: /\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,
                loader: "file-loader?name=assets/[name].[hash].[ext]"
            },
            {
                test: /\.css$/,
                use: [
                    "to-string-loader",
                    "css-loader"
                ],
                exclude: [helpers.root("client/styles.css")]
            },
            {
                test: /\.css$/,
                use: ["style-loader", "css-loader"],
                include: [helpers.root("client/styles.css")]
            }
        ]
    }
};

export default config;
