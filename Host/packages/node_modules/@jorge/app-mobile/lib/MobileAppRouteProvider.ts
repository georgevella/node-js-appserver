import { IRouteProvider } from "@jorge/lib-webapphost";
import * as di from "@jorge/lib-di";
import { Injectable } from "container-ioc";
import { Express, Request, Response, NextFunction, Router } from "express";
import * as express from "express"    // required for express()
import * as path from "path";
import { IServiceProvider } from "@jorge/lib-di";
import { getCurrentContainer } from '@jorge/lib-di-express'

@Injectable()
export class MobileAppRouteProvider implements IRouteProvider {
  app: Express;
  router: Router;

  shouldHandleRequest(request: Request): boolean {
    return true;
  }

  handleRequest(
    request: Request,
    response: Response,
    next: NextFunction
  ): void {
    this.app(request, response, next);
  }

  public readonly path: string = "/";

  constructor() {
    this.app = express();

    this.router = express.Router();

    this.router.get("/", (req, res, next) => {
      let container: IServiceProvider = getCurrentContainer(req);
      let value: string = container.getService(Symbol.for("Name"));
      console.log("Name = "+value);

      var options = {
        root: __dirname + "/../../public/",
        dotfiles: "deny",
        headers: { "x-timestamp": Date.now(), "x-sent": true }
      };

      res.sendFile("index.html", options, function(err) {
        if (err) {
          next(err);
        } else {
          console.log("Sent: " + options.root + "/index.html");
        }
      });
    });

    this.app.use("/", this.router);
    this.app.use(express.static(__dirname + "/../../public/"));
  }

  public getExpressRouter(): express.Router {
    return this.router;
  }
}
