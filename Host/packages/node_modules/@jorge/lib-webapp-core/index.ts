import { getCurrentContainer } from "@jorge/lib-di-express";
import { IServiceProvider } from "@jorge/lib-di";
import * as express from "express";

export const TRouteProvider = Symbol.for("IRouteProvider");
export const TMiddleware = Symbol.for("IMiddleware");

export interface IMiddleware {
  handleRequest(request: express.Request, response: express.Response): boolean;
}

export interface IRoutingMiddleware extends IMiddleware {
  readonly path: string;

  shouldHandleRequest(request: express.Request): boolean;
}

export interface MiddlewareHandler {
  (
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ): void;
}

export function middleware(token: Symbol): MiddlewareHandler {
  return (
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) => {
    var container: IServiceProvider = getCurrentContainer(req);
    var middleware: IMiddleware = container.getService<IMiddleware>(token);

    if (middleware.handleRequest(req, res)) {
      next();
    }
  };
}
