import {IContainer} from 'container-ioc';

import "reflect-metadata"

import { Container, LifeTime, Injectable } from "container-ioc";
import { IModule } from './lib/interfaces';
import { IServiceProvider, ServiceProvider } from "./lib/serviceprovider";
import { ContainerConfiguration } from './lib/configuration';
import { TServiceProvider } from './lib/symbols';

export * from "./lib/configuration"
export * from "./lib/symbols"
export * from "./lib/interfaces"
export * from "./lib/serviceprovider"

let containerConfiguration: ContainerConfiguration = new ContainerConfiguration();

let globalContainer: Container = new Container();

let modules: IModule[] = [];

export function getGlobalServiceProvider() : IServiceProvider
{
    return <IServiceProvider>globalContainer.resolve(TServiceProvider);
}

export function registerModule(m: IModule) {  
  modules.push(m);
}

export function createChildContainer() : IContainer {
  return globalContainer.createScope();
}

export function createChildServiceProvider(parentContainer?: IContainer) : IServiceProvider
{
  if (parentContainer == null)
  {
    let childContainer: IContainer = globalContainer.createScope();
    return new ServiceProvider(childContainer);  
  }

  let childContainer: IContainer = parentContainer.createScope();
  return new ServiceProvider(childContainer);
}

export function initializeDependencyInjection()
{
  modules.forEach(m=> {
    m.registerServices(containerConfiguration);
  });

  containerConfiguration.configurationContainer(globalContainer);
}

export function getAllModules() : IModule[] {
  return modules;
}

// register service provider as a singleton within the container
globalContainer.register([
  {
    token: TServiceProvider,
    useFactory: () => new ServiceProvider(globalContainer),
    lifeTime: LifeTime.Persistent
  }
]);