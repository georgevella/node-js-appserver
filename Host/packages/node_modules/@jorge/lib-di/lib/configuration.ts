import { IConstructable } from "@jorge/lib-di/lib/interfaces";
import { IContainer, LifeTime } from "container-ioc";

abstract class BaseRegistration {
  /**
   *
   */
  constructor(
    public readonly token: any,
    public readonly lifeCycle: Lifecycle
  ) {}

  abstract applyRegistration(container: IContainer): void;
}

class SingleTypeRegistration extends BaseRegistration {
  applyRegistration(container: IContainer): void {
    var registrationLifeTime: LifeTime = LifeTime.PerRequest;

    switch (this.lifeCycle) {
      case Lifecycle.PerRequest:
        registrationLifeTime = LifeTime.PerRequest;
        break;
      case Lifecycle.Singleton:
        registrationLifeTime = LifeTime.Persistent;
        break;
    }

    container.register({
      token: this.token,
      useClass: this.type,
      lifeTime: registrationLifeTime
    });
  }
  /**
   *
   */
  constructor(
    public readonly token: any,
    public readonly lifeCycle: Lifecycle,
    public readonly type: IConstructable
  ) {
    super(token, lifeCycle);
  }
}

class CollectionRegistration extends BaseRegistration {
  public readonly types: IConstructable[];

  constructor(
    public readonly token: any,
    public readonly lifeCycle: Lifecycle,
    type: IConstructable
  ) {
    super(token, lifeCycle);
    this.types = [type];
  }

  public applyRegistration(container: IContainer) {
    this.types.forEach(e => container.register([e]));

    container.register({
      token: this.token,
      useFactory: (...args: any[]) => {
        return args;
      },
      inject: this.types
    });
  }
}

enum Lifecycle {
  PerRequest,
  Singleton
}

export class ContainerConfiguration {
  private items: { [index: string]: BaseRegistration } = {};

  public register(token: Symbol, type: IConstructable): void {
    var r = new SingleTypeRegistration(token, Lifecycle.PerRequest, type);
    this.items[token.toString()] = r;
  }

  public registerSingleton(token: Symbol, type: IConstructable): void {
    var r = new SingleTypeRegistration(token, Lifecycle.Singleton, type);
    this.items[token.toString()] = r;
  }
  public registerCollection(token: Symbol, type: IConstructable): void {
    var r = new CollectionRegistration(token, Lifecycle.PerRequest, type);
    this.items[token.toString()] = r;
  }
  public configurationContainer(container: IContainer) {
    for (var prop in this.items) {
      if (this.items.hasOwnProperty(prop)) {
        this.items[prop].applyRegistration(container);
      }
    }
  }
}
