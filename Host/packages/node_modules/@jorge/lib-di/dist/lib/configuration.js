"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var container_ioc_1 = require("container-ioc");
var BaseRegistration = /** @class */ (function () {
    /**
     *
     */
    function BaseRegistration(token, lifeCycle) {
        this.token = token;
        this.lifeCycle = lifeCycle;
    }
    return BaseRegistration;
}());
var SingleTypeRegistration = /** @class */ (function (_super) {
    __extends(SingleTypeRegistration, _super);
    /**
     *
     */
    function SingleTypeRegistration(token, lifeCycle, type) {
        var _this = _super.call(this, token, lifeCycle) || this;
        _this.token = token;
        _this.lifeCycle = lifeCycle;
        _this.type = type;
        return _this;
    }
    SingleTypeRegistration.prototype.applyRegistration = function (container) {
        var registrationLifeTime = container_ioc_1.LifeTime.PerRequest;
        switch (this.lifeCycle) {
            case Lifecycle.PerRequest:
                registrationLifeTime = container_ioc_1.LifeTime.PerRequest;
                break;
            case Lifecycle.Singleton:
                registrationLifeTime = container_ioc_1.LifeTime.Persistent;
                break;
        }
        container.register({
            token: this.token,
            useClass: this.type,
            lifeTime: registrationLifeTime
        });
    };
    return SingleTypeRegistration;
}(BaseRegistration));
var CollectionRegistration = /** @class */ (function (_super) {
    __extends(CollectionRegistration, _super);
    function CollectionRegistration(token, lifeCycle, type) {
        var _this = _super.call(this, token, lifeCycle) || this;
        _this.token = token;
        _this.lifeCycle = lifeCycle;
        _this.types = [type];
        return _this;
    }
    CollectionRegistration.prototype.applyRegistration = function (container) {
        this.types.forEach(function (e) { return container.register([e]); });
        container.register({
            token: this.token,
            useFactory: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return args;
            },
            inject: this.types
        });
    };
    return CollectionRegistration;
}(BaseRegistration));
var Lifecycle;
(function (Lifecycle) {
    Lifecycle[Lifecycle["PerRequest"] = 0] = "PerRequest";
    Lifecycle[Lifecycle["Singleton"] = 1] = "Singleton";
})(Lifecycle || (Lifecycle = {}));
var ContainerConfiguration = /** @class */ (function () {
    function ContainerConfiguration() {
        this.items = {};
    }
    ContainerConfiguration.prototype.register = function (token, type) {
        var r = new SingleTypeRegistration(token, Lifecycle.PerRequest, type);
        this.items[token.toString()] = r;
    };
    ContainerConfiguration.prototype.registerSingleton = function (token, type) {
        var r = new SingleTypeRegistration(token, Lifecycle.Singleton, type);
        this.items[token.toString()] = r;
    };
    ContainerConfiguration.prototype.registerCollection = function (token, type) {
        var r = new CollectionRegistration(token, Lifecycle.PerRequest, type);
        this.items[token.toString()] = r;
    };
    ContainerConfiguration.prototype.configurationContainer = function (container) {
        for (var prop in this.items) {
            if (this.items.hasOwnProperty(prop)) {
                this.items[prop].applyRegistration(container);
            }
        }
    };
    return ContainerConfiguration;
}());
exports.ContainerConfiguration = ContainerConfiguration;
//# sourceMappingURL=configuration.js.map