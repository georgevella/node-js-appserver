"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var container_ioc_1 = require("container-ioc");
var serviceprovider_1 = require("./lib/serviceprovider");
var configuration_1 = require("./lib/configuration");
var symbols_1 = require("./lib/symbols");
__export(require("./lib/configuration"));
__export(require("./lib/symbols"));
__export(require("./lib/serviceprovider"));
var containerConfiguration = new configuration_1.ContainerConfiguration();
var globalContainer = new container_ioc_1.Container();
function getGlobalServiceProvider() {
    return globalContainer.resolve(symbols_1.TServiceProvider);
}
exports.getGlobalServiceProvider = getGlobalServiceProvider;
function registerModule(m) {
    m.registerServices(containerConfiguration);
}
exports.registerModule = registerModule;
function createChildContainer() {
    return globalContainer.createScope();
}
exports.createChildContainer = createChildContainer;
function createChildServiceProvider(parentContainer) {
    if (parentContainer == null) {
        var childContainer_1 = globalContainer.createScope();
        return new serviceprovider_1.ServiceProvider(childContainer_1);
    }
    var childContainer = parentContainer.createScope();
    return new serviceprovider_1.ServiceProvider(childContainer);
}
exports.createChildServiceProvider = createChildServiceProvider;
function initializeDependencyInjection() {
    containerConfiguration.configurationContainer(globalContainer);
}
exports.initializeDependencyInjection = initializeDependencyInjection;
// register service provider as a singleton within the container
globalContainer.register([
    {
        token: symbols_1.TServiceProvider,
        useFactory: function () { return new serviceprovider_1.ServiceProvider(globalContainer); },
        lifeTime: container_ioc_1.LifeTime.Persistent
    }
]);
//# sourceMappingURL=index.js.map