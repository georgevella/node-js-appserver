import {IContainer} from 'container-ioc';

import { Container, LifeTime, Injectable } from "container-ioc";

let globalContainer: Container = new Container();
export const TServiceProvider = Symbol.for("IServiceProvider");

export function getGlobalServiceProvider() : IServiceProvider
{
    return <IServiceProvider>globalContainer.resolve(TServiceProvider);
}

export function registerModule(module: IModule) {
  module.registerServices(globalContainer);
}

export interface IModule {
  registerServices(container: Container): void;
}

export function createChildContainer() : IContainer{
  return globalContainer.createScope();
}

export function createChildServiceProvider(parentContainer?: IContainer) : IServiceProvider
{
  if (parentContainer == null)
  {
    let childContainer: IContainer = globalContainer.createScope();
    return new ServiceProvider(childContainer);  
  }

  let childContainer: IContainer = parentContainer.createScope();
  return new ServiceProvider(childContainer);
}

export interface IServiceProvider {
  getService<T>(token: any): T;
}

@Injectable()
class ServiceProvider implements IServiceProvider {
  /**
   *
   */
  constructor(private container: IContainer) {    
    
  }
  /**
   * getService<T>
   */
  public getService<T>(token: any): T {
    var instance = this.container.resolve(token) as T;
    if (instance == null) {
      throw new Error("Service not found");
    }
    return instance;
  }
}

@Injectable()
class GlobalServiceProvider extends ServiceProvider
{
  /**
   *
   */
  constructor() {
    super(globalContainer);    
  }
}


// register service provider as a singleton within the container
globalContainer.register([
  {
    token: TServiceProvider,
    useClass: GlobalServiceProvider,
    lifeTime: LifeTime.Persistent
  }
]);