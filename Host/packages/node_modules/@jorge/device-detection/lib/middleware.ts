import {TDeviceDetectionService} from './symbols';
import {IDeviceInformation, IDeviceDetectionService} from './interfaces';
import * as express from 'express';
import { getCurrentContainer } from "@jorge/lib-di-express";
import { IMiddleware } from '@jorge/lib-webapp-core';
import { Injectable, Inject } from 'container-ioc';

const DeviceDetectionRequestMetadata : string = "deviceinfo";

@Injectable()
export class DeviceDetectionMiddleware implements IMiddleware {
  /**
   *
   */
  constructor(@Inject(TDeviceDetectionService) private deviceDetectionService: IDeviceDetectionService) {
    
    
  }
  handleRequest(request: express.Request, response: express.Response): boolean {
    var uaString: string = request.header("user-agent") as string;
    if (uaString != undefined) {
      var result = this.deviceDetectionService.parseUserAgent(uaString);
  
      console.log("DeviceInformation: " + JSON.stringify(result));
  
      Reflect.defineMetadata(DeviceDetectionRequestMetadata, result, request);
    }

    return true;
  }
}

export function getDeviceInformation( req: express.Request ) : IDeviceInformation
{
    var deviceInformation: IDeviceInformation = Reflect.getMetadata(DeviceDetectionRequestMetadata, req);
    return deviceInformation;
}